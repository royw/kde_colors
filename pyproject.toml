[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "kde_colors"
version = "0.1.0"
description = "A CLI tool that extracts color schemes from KDE themes"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
    { name = "Roy Wright", email = "" },
]
maintainers = [
    { name = "Roy Wright", email = "" },
]

keywords = [
    "PYTHON",
    "CLI",
    "APPLICATION"
]

scripts = {'kde_colors' = "kde_colors.cli.cli_runner:run_cli"}

dependencies = [
    "loguru>=0.7.0",
    "typing-extensions>=4.0.0",
    "xdg-base-dirs>=6.0.2",
]

[project.optional-dependencies]
dev = [
    "bandit>=1.8.3",
    "build>=1.0.3",
    "codespell>=2.2.6",
    "deadcode>=1.0.0",
    "mypy>=1.7.0",
    "pytest>=7.4.3",
    "pytest-benchmark>=4.0.0",
    "pytest-cov>=4.1.0",
    "pytest-timeout>=2.4.0",
    "pre-commit>=3.5.0",
    "ruff>=0.1.6",
    "tomli>=2.0.1",
    "twine>=4.0.2",
    "radon>=6.0.1",
    "uv>=0.1.0",
    "version-bumper>=0.1.0",
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.14",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-mermaid2-plugin>=1.2.1",
    "mkdocs-literate-nav>=0.6.1",
    "mkdocs-git-revision-date-localized-plugin>=1.4.7",
]

[tool.coverage.run]
source = ['src']
branch = true
parallel = true
concurrency = ['multiprocessing']
omit = [
  "**/__init__.py",
  "**/__main__.py",
  "**/tests/**"
]

[tool.coverage.paths]
source = ["kde_colors"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.codespell]
skip = '.git,*.pyc,*.pdf,*.svg,*.log'
quiet-level = 3
ignore-words-list = 'xyzzy,unparseable'

[tool.deadcode]
exclude = ["venv", "tests"]
# ignore-names = ["entry_type", "errors"]

[tool.hatch.build]
packages = ["src/kde_colors"]
include = ["py.typed"]

[tool.hatch.build.targets.wheel]
packages = ["src/kde_colors"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true

# Source and package configuration
namespace_packages = false
mypy_path = "src"
files = ["src/kde_colors", "tests"]

# Strict mode options
strict = true
show_error_codes = true
ignore_missing_imports = false
follow_imports = "normal"

# Type checking rules
disallow_untyped_defs = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_untyped_globals = true
disallow_untyped_calls = true
disallow_any_generics = true
disallow_untyped_decorators = true
check_untyped_defs = true
no_implicit_optional = true
strict_optional = true

# Warning options
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
#  "-n", "auto",
#  "-n", "auto",
  "-ra",
  "--showlocals",
  "--strict-markers",
  "--strict-config",
#  "-q",
  "--cov=kde_colors",
  "--cov-report=term-missing"
]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
pythonpath = "src"
testpaths = [
    "tests/unit",
    "tests/integration",
    "tests/e2e",
]

[tool.ruff]
target-version = "py311"
src = ["src", "tests"]
extend-exclude = ["dist", "docs", "metrics", "scripts", "site", ".venv"]
line-length = 119
fix = true
show-fixes = true

[tool.ruff.lint]
# Add the `line-too-long` rule to the enforced rule set. By default, Ruff omits rules that
# overlap with the use of a formatter, like Black, but we can override this behavior by
# explicitly adding the rule.
# https://docs.astral.sh/ruff/rules
# extend-select = ["E501"]
extend-select = [
  #"F",        # pyflakes
  #"E",        # pycodestyle Error
  #"W",        # pycodestyle Warning
  "C901",     # mccade
  "I",        # isort
  "N",        # pep8-naming
  #"D",        # pydocstyle
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  #"ANN",      # flake8-annotations
  #"ASYNC",    # flake8-async
  #"S",        # flake8-bandit
  #"BLE",      # flake8-blind-except
  #"FBT",      # flake8-boolean-trap
  "B",        # flake8-bugbear
  #"A",        # flake8-builtins
  #"COM",      # flake8-commas
  #"CPY",      # flake8-copyright
  "C4",       # flake8-comprehensions
  #"DTZ",      # flake8-datetimez
  #"T10",      # flake8-debugger
  #"DJ",       # flake8-django
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  #"FA",       # flake8-future-annotations
  #"ICS",      # flake8-implicit-str-concat
  "ICN",      # flake8-import-conventions
  "LOG",      # flake8-logging (added 7/4/24)
  "G",        # flake8-logging-format
  "INP",      # flake8-no-pep420 (added 7/4/24)
  "PIE",      # flake8-pie
  #"T20",      # flake8-print
  #"PYI",      # flake8-pyi
  "PT",       # flake8-pytest-style
  #"Q",        # flake8-quotes
  #"RSE",      # flake8-raise
  "RET",      # flake8-return
  #"SLF",      # flake8-self
  #"SLOT",     # flake8-slot
  "SIM",      # flake8-simplify
  #"TID",      # flake8-tidy
  #"TCH",      # flake8-type-checking
  #"INT",      # flake8-gettest
  "ARG",      # flake8-unused-arguments
  "PTH",      # flake8-use-pathlib
  #"TD",       # flake8-todos
  #"FIX",      # flake8-fixme
  #"ERA",      # eradicate
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PL",       # pylint
  #"TRY",      # tryceratops
  #"FLY",      # flynt
  "NPY",      # NumPy specific rules
  #"AIR",      # airflow
  #"PERF",     # perflint
  #"FURB",     # refurb
  "RUF",      # Ruff-specific
]

# Ignore specific rules
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  "S101",     # pytest uses "assert" so allow it
  "N817",     # CamelCase imports
]

# Required imports for isort
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["scientific python._compat.typing"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
