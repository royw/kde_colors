#!/usr/bin/env bash

# check_md_bash - Execute bash code blocks from markdown files
#
# Usage: check_md_bash [OPTIONS] [FILE...]
#
# For each markdown file, extracts and executes bash code blocks (```bash ... ```)
# and reports any errors. Exits with non-zero status if any command fails.
#
# Options:
#   --ignore PATTERN    Skip commands matching the given glob pattern
#   -h, --help          Show this help message and exit

set -euo pipefail

# Parse command line arguments
declare -a ignore_patterns=()
files=()

while [[ $# -gt 0 ]]; do
    case $1 in
        --ignore)
            ignore_patterns+=("$2")
            shift 2
            ;;
        -h|--help)
            echo "Usage: $0 [OPTIONS] [FILE...]"
            echo "Execute bash code blocks from markdown files"
            echo ""
            echo "Options:"
            echo "  --ignore PATTERN    Skip commands matching the given glob pattern"
            echo "  -h, --help          Show this help message and exit"
            exit 0
            ;;
        --)
            shift
            files+=("$@")
            break
            ;;
        -*)
            echo "Error: Unknown option: $1" >&2
            exit 1
            ;;
        *)
            files+=("$1")
            shift
            ;;
    esac
done

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track if any command fails
has_errors=0

# Function to execute a bash command
run_command() {
    local cmd=$1
    local file=$2
    local line_num=$3

    echo -e "${YELLOW}Running:${NC} ${cmd}"

    # Create a temporary file for the command
    local temp_file
    temp_file=$(mktemp)
    echo "#!/usr/bin/env bash" > "$temp_file"
    echo "set -euo pipefail" >> "$temp_file"
    echo "cd $(pwd)" >> "$temp_file"  # Ensure we're in the right directory
    echo "$cmd" >> "$temp_file"
    chmod +x "$temp_file"

    # Execute the command
    if "$temp_file"; then
        echo -e "${GREEN}✓ Success${NC}"
    else
        echo -e "${RED}✗ Failed in $file (line $line_num)${NC}"
        has_errors=1
    fi

    # Clean up
    rm -f "$temp_file"
}

# Function to process a single markdown file
process_file() {
    local file=$1
    local in_bash_block=0
    local cmd=""
    local line_num=0
    local block_start_line=0

    echo -e "\n${YELLOW}Processing: $file${NC}"

    while IFS= read -r line; do
        line_num=$((line_num + 1))

        # Check for bash code block start/end
        if [[ "$line" =~ ^\`\`\`(bash)?$ ]]; then
            if (( in_bash_block )); then
                # End of bash block - execute the command
                in_bash_block=0
                if [ -n "$cmd" ]; then
                    run_command "$cmd" "$file" "$block_start_line"
                    cmd=""
                fi
            else
                # Start of bash block
                in_bash_block=1
                block_start_line=$((line_num + 1))
            fi
        elif (( in_bash_block )); then
            # Inside a bash block, accumulate the command
            # Skip comments and empty lines at the start
            if [[ -z "$cmd" && ( -z "$line" || "$line" =~ ^[[:space:]]*# ) ]]; then
                continue
            fi

            # Skip commands that match ignore patterns
            local should_skip=0
            for pattern in "${ignore_patterns[@]}"; do
                if [[ "$line" == $pattern ]]; then
                    echo -e "${YELLOW}↷ Skipping (matches '$pattern'):${NC} $line"
                    should_skip=1
                    break
                fi
            done

            if (( should_skip )); then
                continue
            fi

            cmd="${cmd}${cmd:+$'\n'}$line"
        fi
    done < "$file"

    # Check for unclosed code block
    if (( in_bash_block )); then
        echo -e "${RED}Error: Unclosed bash block in $file (started at line $block_start_line)${NC}"
        has_errors=1
    fi
}

# Check if any files were provided
if [ ${#files[@]} -eq 0 ]; then
    echo "Error: No input files specified"
    echo "Usage: $0 [OPTIONS] [FILE...]"
    echo "Try '$0 --help' for more information"
    exit 1
fi

# Process each file
for file in "${files[@]}"; do
    if [ ! -f "$file" ]; then
        echo -e "${RED}Error: File not found: $file${NC}"
        has_errors=1
        continue
    fi

    if [[ "$file" != *.md && "$file" != *.markdown ]]; then
        echo -e "${YELLOW}Warning: $file does not appear to be a markdown file (missing .md or .markdown extension)${NC}"
    fi

    process_file "$file"
done

# Exit with appropriate status
exit $has_errors
